# This is a basic workflow to help you get started with Actions

name: Pull request automatic checking

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, edited]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check_task_number:
    runs-on: ubuntu-latest
    outputs:
      task_number: ${{ steps.get_task_number.outputs.task_number }}
    steps:
      - uses: actions/checkout@v2
#       - name: Dump GitHub context
#         env:
#           GITHUB_CONTEXT: ${{ toJson(github) }}
#         run: echo "$GITHUB_CONTEXT"
#       - name: Dump job context
#         env:
#           JOB_CONTEXT: ${{ toJson(job) }}
#         run: echo "$JOB_CONTEXT"
#       - name: Dump steps context
#         env:
#           STEPS_CONTEXT: ${{ toJson(steps) }}
#         run: echo "$STEPS_CONTEXT"
#       - name: Dump runner context
#         env:
#           RUNNER_CONTEXT: ${{ toJson(runner) }}
#         run: echo "$RUNNER_CONTEXT"
#       - name: Dump strategy context
#         env:
#           STRATEGY_CONTEXT: ${{ toJson(strategy) }}
#         run: echo "$STRATEGY_CONTEXT"
#       - name: Dump matrix context
#         env:
#           MATRIX_CONTEXT: ${{ toJson(matrix) }}
#         run: echo "$MATRIX_CONTEXT"
      - uses: actions-ecosystem/action-remove-labels@v1
        if: contains(github.event.pull_request.labels.*.name, 'task 1')
        with:
          github_token: ${{ secrets.github_token }}
          labels: task 1
      - uses: actions-ecosystem/action-remove-labels@v1
        if: contains(github.event.pull_request.labels.*.name, 'task 2')
        with:
          github_token: ${{ secrets.github_token }}
          labels: task 2 
      - uses: actions-ecosystem/action-remove-labels@v1
        if: contains(github.event.pull_request.labels.*.name, 'task 3')
        with:
          github_token: ${{ secrets.github_token }}
          labels: task 3 
      - uses: actions-ecosystem/action-remove-labels@v1
        if: contains(github.event.pull_request.labels.*.name, 'unknown task')
        with:
          github_token: ${{ secrets.github_token }}
          labels: unknown task
      - uses: actions-ecosystem/action-remove-labels@v1
        if: contains(github.event.pull_request.labels.*.name, 'bot approved')
        with:
          github_token: ${{ secrets.github_token }}
          labels: bot approved
      - uses: actions-ecosystem/action-remove-labels@v1
        if: contains(github.event.pull_request.labels.*.name, 'bot changes requested')
        with:
          github_token: ${{ secrets.github_token }}
          labels: bot changes requested
      - name: Get PR title
        id: get_task_number
        run: |
          echo ${{ github.event.pull_request.title }}
          if [[ "${{ github.event.pull_request.title }}" =~ ^[A-Za-z_]+_[1-3]$ ]]; then
            task_number=$(echo "${{ github.event.pull_request.title }}" | sed 's/.*_//')
            echo "Task number detected: ${task_number}"
            echo ::set-output name=task_number::${task_number}
          else
            echo "Task number not detected"
            echo ::set-output name=task_number::0
          fi
      - name: Add task number label
        uses: actions-ecosystem/action-add-labels@v1
        if: steps.get_task_number.outputs.task_number != 0
        with:
          github_token: ${{ secrets.github_token }}
          labels: task ${{ steps.get_task_number.outputs.task_number }}
      - name: Add task number not found label
        uses: actions-ecosystem/action-add-labels@v1
        if: steps.get_task_number.outputs.task_number == 0
        with:
          github_token: ${{ secrets.github_token }}
          labels: |
            unknown task
            bot changes requested
      - name: Request change on pull request with invalid name
        if: steps.get_task_number.outputs.task_number == 0
        uses: andrewmusgrave/automatic-pull-request-review@0.0.2
        with:
          repo-token: '${{ secrets.GITHUB_TOKEN }}'
          event: REQUEST_CHANGES
          body: Пожалуйста, придерживайтесь схемы именования Pull Request (<фамилия_инициалы(транслитом)>_<номер_задания>)
      - name: Return exit code
        run: |
          if (( ${{ steps.get_task_number.outputs.task_number }} != 0)); then
            exit 0
          else
            exit 1
          fi
  task1:
    runs-on: ubuntu-latest
    needs: [check_task_number]
    if: needs.check_task_number.outputs.task_number == 1
    steps:
      - uses: actions/checkout@v2.1.0
      - uses: jitterbit/get-changed-files@v1
        id: files
        with:
          format: 'csv'
      - name: FolderCount
        id: check_folders
        run: |
          folders=()
          mapfile -d ',' -t modified_files < <(printf '%s,' '${{ steps.files.outputs.all }}')
          for added_modified_file in "${modified_files[@]}"; do
            echo "Do something with this ${added_modified_file}."
            folder=$(echo "${added_modified_file}" | sed 's/\/.*//')
            folders+=("$folder")
          done
          uniqueFolders=()
          while IFS= read -r -d '' x
          do
            if [[ "$x" != ".github" ]]; then
              uniqueFolders+=("$x")
            fi
          done < <(printf "%s\0" "${folders[@]}" | sort -uz)
          echo "${#uniqueFolders[@]}"
          if [[ "${uniqueFolders[0]}" =~ ^[0-9]{4}_[A-Za-z_]+$ ]]; then
              echo ::set-output name=folder_name_valid::1
          else
              echo ::set-output name=folder_name_valid::0
          fi
          echo ::set-output name=folder_count::${#uniqueFolders[@]}
          echo ::set-output name=folder_name::${uniqueFolders[0]}
      - name: Check file existence
        id: check_files
        run: |
          echo "${{ steps.check_folders.outputs.folder_name }}"
          file_goal_path="${{ steps.check_folders.outputs.folder_name }}/goal.md"
          file_problem_path="${{ steps.check_folders.outputs.folder_name }}/problem.md"
          file_relevance_path="${{ steps.check_folders.outputs.folder_name }}/relevance.md"
          file_research_object_path="${{ steps.check_folders.outputs.folder_name }}/research_object.md"
          file_research_subject_path="${{ steps.check_folders.outputs.folder_name }}/research_subject.md"
          file_tasks_path="${{ steps.check_folders.outputs.folder_name }}/tasks.md"
          file_goal=0
          file_problem=0
          file_relevance=0
          file_research_object=0
          file_research_subject=0
          file_tasks=0
          
          mapfile -d ',' -t modified_files < <(printf '%s,' '${{ steps.files.outputs.all }}')
          for added_modified_file in "${modified_files[@]}"; do
            echo "Do something with this ${added_modified_file}."
            if [ "${added_modified_file}" = "${file_goal_path}" ]; then
              file_goal=1
            fi
            if [ "${added_modified_file}" = "${file_problem_path}" ]; then
              file_problem=1
            fi
            if [ "${added_modified_file}" = "${file_relevance_path}" ]; then
              file_relevance=1
            fi
            if [ "${added_modified_file}" = "${file_research_object_path}" ]; then
              file_research_object=1
            fi
            if [ "${added_modified_file}" = "${file_research_subject_path}" ]; then
              file_research_subject=1
            fi
            if [ "${added_modified_file}" = "${file_tasks_path}" ]; then
              file_tasks=1
            fi
          done
          
          echo ::set-output name=file_goal_path::${file_goal_path}
          echo ::set-output name=file_problem_path::${file_problem_path}
          echo ::set-output name=file_relevance_path::${file_relevance_path}
          echo ::set-output name=file_research_object_path::${file_research_object_path}
          echo ::set-output name=file_research_subject_path::${file_research_subject_path}
          echo ::set-output name=file_tasks_path::${file_tasks_path}
          
          echo ::set-output name=file_goal::${file_goal}
          echo ::set-output name=file_problem::${file_problem}
          echo ::set-output name=file_relevance::${file_relevance}
          echo ::set-output name=file_research_object::${file_research_object}
          echo ::set-output name=file_research_subject::${file_research_subject}
          echo ::set-output name=file_tasks::${file_tasks}
          
          all=0
          if (( file_goal == 1 && file_problem == 1 && file_relevance == 1 && file_research_object == 1 && file_research_subject == 1 && file_tasks == 1 )); then
            all=1
          fi
          
          echo ::set-output name=all::$all
      - name: Read file total length
        id: file_length
        run: |
          total_length=0        
          if (( ${{ steps.check_files.outputs.file_goal }} == 1)); then
            total_length=$(($total_length + $(($(wc -m < "${{ steps.check_files.outputs.file_goal_path }}") +0))))
          fi
          if (( ${{ steps.check_files.outputs.file_problem }} == 1)); then
            total_length=$(($total_length + $(($(wc -m < "${{ steps.check_files.outputs.file_problem_path }}") +0))))
          fi
          if (( ${{ steps.check_files.outputs.file_relevance }} == 1)); then
            total_length=$(($total_length + $(($(wc -m < "${{ steps.check_files.outputs.file_relevance_path }}") +0))))
          fi
          if (( ${{ steps.check_files.outputs.file_research_object }} == 1)); then
            total_length=$(($total_length + $(($(wc -m < "${{ steps.check_files.outputs.file_research_object_path }}") +0))))
          fi
          if (( ${{ steps.check_files.outputs.file_research_subject }} == 1)); then
            total_length=$(($total_length + $(($(wc -m < "${{ steps.check_files.outputs.file_research_subject_path }}") +0))))
          fi
          if (( ${{ steps.check_files.outputs.file_tasks }} == 1)); then
            total_length=$(($total_length + $(($(wc -m < "${{ steps.check_files.outputs.file_tasks_path }}") +0))))
          fi
          echo ::set-output name=total_length::${total_length}
          echo "$total_length"
      - name: Preparing Message
        id: prepare_message
        run: |
          requirement_met=1
          # single folder check
          if (( ${{ steps.check_folders.outputs.folder_count }} == 1)); then
            echo ::set-output name=single_folder::"✔"
          else
            echo ::set-output name=single_folder::"❌"
            requirement_met=0
          fi     
          # file check
          if (( ${{ steps.check_files.outputs.all }} != 1)); then
            requirement_met=0
          fi  
          if (( ${{ steps.check_files.outputs.file_goal }} == 1)); then
            echo ::set-output name=file_goal::"✔"
          else
            echo ::set-output name=file_goal::"❌"          
          fi          
          if (( ${{ steps.check_files.outputs.file_problem }} == 1)); then
            echo ::set-output name=file_problem::"✔"
          else
            echo ::set-output name=file_problem::"❌"          
          fi          
          if (( ${{ steps.check_files.outputs.file_relevance }} == 1)); then
            echo ::set-output name=file_relevance::"✔"
          else
            echo ::set-output name=file_relevance::"❌"          
          fi          
          if (( ${{ steps.check_files.outputs.file_research_object }} == 1)); then
            echo ::set-output name=file_research_object::"✔"
          else
            echo ::set-output name=file_research_object::"❌"          
          fi          
          if (( ${{ steps.check_files.outputs.file_research_subject }} == 1)); then
            echo ::set-output name=file_research_subject::"✔"
          else
            echo ::set-output name=file_research_subject::"❌"          
          fi          
          if (( ${{ steps.check_files.outputs.file_tasks }} == 1)); then
            echo ::set-output name=file_tasks::"✔"
          else
            echo ::set-output name=file_tasks::"❌"          
          fi          
          
          # message for file length check
          if (( ${{ steps.file_length.outputs.total_length }} >= 300)); then
            echo ::set-output name=total_length::"✔"
          else
            echo ::set-output name=total_length::"❌"          
            requirement_met=0
          fi
          
          if (( ${{ steps.check_folders.outputs.folder_name_valid }} == 1)); then
            echo ::set-output name=folder_name_valid::"✔"
          else
            echo ::set-output name=folder_name_valid::"❌"     
            requirement_met=0     
          fi  
          
          if (( $requirement_met == 1)); then
            echo ::set-output name=action::APPROVE
          else
            echo ::set-output name=action::REQUEST_CHANGES         
          fi  
          
          echo ::set-output name=requirement_met::${requirement_met}    
      - name: Sending to external service for further checking
        run: echo "Placeholder for sending to checking service"
      - name: Approve/Request changes pull request
        uses: andrewmusgrave/automatic-pull-request-review@0.0.2
        with:
          repo-token: '${{ secrets.GITHUB_TOKEN }}'
          event: ${{ steps.prepare_message.outputs.action }}
          body: |
            ## Автоматическая проверка
            
            1. Работает только с одним каталогом: ${{ steps.prepare_message.outputs.single_folder }}
            
            2. Название каталога: ${{ steps.prepare_message.outputs.folder_name_valid }}
            
            3. Присутствуют все необходимые файлы: 
            
            - goal.md: ${{ steps.prepare_message.outputs.file_goal }}
            - problem.md: ${{ steps.prepare_message.outputs.file_problem }}
            - relevance.md: ${{ steps.prepare_message.outputs.file_relevance }}
            - research_object.md: ${{ steps.prepare_message.outputs.file_research_object }}
            - research_subject.md: ${{ steps.prepare_message.outputs.file_research_subject }}
            - tasks.md: ${{ steps.prepare_message.outputs.file_tasks }}
            
            4. Сумма длин файлов: ${{ steps.file_length.outputs.total_length }} ${{ steps.prepare_message.outputs.total_length }}
      - name: Add label (approved)
        uses: actions-ecosystem/action-add-labels@v1
        if: steps.prepare_message.outputs.requirement_met == 1
        with:
          github_token: ${{ secrets.github_token }}
          labels: bot approved
      - name: Add label (changes requested)
        uses: actions-ecosystem/action-add-labels@v1
        if: steps.prepare_message.outputs.requirement_met == 0
        with:
          github_token: ${{ secrets.github_token }}
          labels: bot changes requested
      - name: Return exit code
        run: |
          if (( ${{ steps.prepare_message.outputs.requirement_met }} == 1)); then
            exit 0
          else
            exit 1
          fi
  task2:
    runs-on: ubuntu-latest
    needs: [check_task_number]
    if: needs.check_task_number.outputs.task_number == 2
    steps:
      - name: Place holder
        run: |
          echo "Running checks on task 2..."
  task3:
    runs-on: ubuntu-latest
    needs: [check_task_number]
    if: needs.check_task_number.outputs.task_number == 3
    steps:
      - name: Place holder
        run: |
          echo "Running checks on task 3..."
